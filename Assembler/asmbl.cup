/**********************************************************************
 Java CUP specification for a parser for C-- programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        System.err.println(0 +":"+ 0 +" Syntax error at end of file");
    }
    else {
		System.err.println(((TokenVal)currToken.value).linenum +":"+
                     ((TokenVal)currToken.value).charnum + " Syntax Error"
                     );
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal TokenVal       ADD, SUB, XOR, LD, SW, LH, LL, SHIFT,
						BRANCH, JLINK, JREG, CTRL, SEND, SET, 
						RECV, REG, INT, SHIFTMODE, COND;


/* Nonterminals
 *
 */
non terminal ProgramNode      program;
non terminal LinkedList       instrList;
non terminal InstrNode        instr;


start with program;


/* Grammar with actions
 */
program         ::= instrList: i
                {: RESULT = new ProgramNode(new InstrListNode(i));
                :}
                ;

instrList        ::= instrList:il instr:i
                {: il.addLast(i);
                   RESULT = il;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<InstrNode>();
                :}
                ;

instr           ::= ADD REG:rd REG:rs REG:rt
				{: RESULT = new InstrNode(0,(int)Integer.valueOf(rd.Index,16), 
											(int)Integer.valueOf(rs.Index,16),
											(int)Integer.valueOf(rt.Index,16));
                :}
				| SUB REG:rd REG:rs REG:rt
				{: RESULT = new InstrNode(1,(int)Integer.valueOf(rd.Index,16), 
											(int)Integer.valueOf(rs.Index,16),
											(int)Integer.valueOf(rt.Index,16));
                :}
				| XOR REG:rd REG:rs REG:rt
				{: RESULT = new InstrNode(2,(int)Integer.valueOf(rd.Index,16), 
											(int)Integer.valueOf(rs.Index,16),
											(int)Integer.valueOf(rt.Index,16));
                :}
				| LD REG:rd REG:rs
				{: RESULT = new InstrNode(3,(int)Integer.valueOf(rd.Index,16), 
											(int)Integer.valueOf(rs.Index,16),
											0);
                :}
				| SW REG:rd REG:rs
				{: RESULT = new InstrNode(4,(int)Integer.valueOf(rd.Index,16), 
											(int)Integer.valueOf(rs.Index,16),
											0);
                :}
				| LH REG:rd INT:imme
				{: int Imme = 0;
				   if (imme.Index.substring(0,2).equals("0x")) { // HEX
					   if (imme.Index.length() > 4) {
						   System.err.println(imme.linenum+ ":"+imme.charnum+ " The integer is too large.");
						   System.exit(-1);
					   }
					   else
						   Imme = Integer.valueOf(imme.Index, 16);
				   }
				   else { //DEC
					   Imme = Integer.valueOf(imme.Index, 10);
					   if (Imme > 255) {
						   System.err.println(imme.linenum+ ":"+imme.charnum+ " The integer is too large.");
						   System.exit(-1);
					   }
				   }
				   RESULT = new InstrNode(5, (int)Integer.valueOf(rd.Index,16), Imme);
				:}
				| LL REG:rd INT:imme
				{: int Imme = 0;
				   if (imme.Index.substring(0,2).equals("0x")) { // HEX
					   if (imme.Index.length() > 4) {
						   System.err.println(imme.linenum+ ":"+imme.charnum+ " The integer is too large.");
						   System.exit(-1);
					   }
					   else
						   Imme = Integer.valueOf(imme.Index, 16);
				   }
				   else { //DEC
					   Imme = Integer.valueOf(imme.Index, 10);
					   if (Imme > 255) {
						   System.err.println(imme.linenum+ ":"+imme.charnum+ " The integer is too large.");
						   System.exit(-1);
					   }
				   }
				   RESULT = new InstrNode(6, (int)Integer.valueOf(rd.Index,16), Imme);
				:}
				| SHIFT REG:rd SHIFTMODE:m INT:imme
				{: int Imme = 0;
				   if (imme.Index.length() > 2 && imme.Index.substring(0,2).equals("0x")) { // HEX
					   if (imme.Index.length() > 3) {
						   System.err.println(imme.linenum+ ":"+imme.charnum+ " The integer is too large.");
						   System.exit(-1);
					   }
					   else
						   Imme = Integer.valueOf(imme.Index, 16);
				   }
				   else { //DEC
					   Imme = Integer.valueOf(imme.Index, 10);
					   if (Imme > 15) {
						   System.err.println(imme.linenum+ ":"+imme.charnum+ " The integer is too large.");
						   System.exit(-1);
					   }
				   }
				   RESULT = new InstrNode(7,(int)Integer.valueOf(rd.Index,16), 
											(int)Integer.valueOf(m.Index,10),Imme);
				:}
				| BRANCH COND:c INT:imme
				{: int Imme = 0;
				   if (imme.Index.length() > 2 && imme.Index.substring(0,2).equals("0x")) { // HEX
					   if (imme.Index.length() > 11) {
						   System.err.println(imme.linenum+ ":"+imme.charnum+ " The integer is too large.");
						   System.exit(-1);
					   }
					   else
						   Imme = Integer.valueOf(imme.Index, 16);
				   }
				   else { //DEC
					   Imme = Integer.valueOf(imme.Index, 10);
					   if (Imme > 511) {
						   System.err.println(imme.linenum+ ":"+imme.charnum+ " The integer is too large.");
						   System.exit(-1);
					   }
				   }
				   RESULT = new InstrNode(8, (int)Integer.valueOf(c.Index, 10), Imme);
				:}
                ;
